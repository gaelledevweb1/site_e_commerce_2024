{% extends 'base.html.twig' %}

{% block title %}Hello DashboardController!
{% endblock %}


{% block content %}

	<div class="d-flex" id="wrapper">

		<button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasWithBothOptions" aria-controls="offcanvasWithBothOptions">Enable both scrolling & backdrop</button>

		<div class="offcanvas offcanvas-start" data-bs-scroll="true" tabindex="-1" id="offcanvasWithBothOptions" aria-labelledby="offcanvasWithBothOptionsLabel">
			<div class="offcanvas-header">
				<h5 class="offcanvas-title" id="offcanvasWithBothOptionsLabel">Dashboard</h5>
				<button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
			</div>
			<div class="offcanvas-body">
				<p>Try scrolling the rest of the page to see this option in action.</p>
				<a href="{{ path('app_admin_category_index') }}" data-turbo-action="replace">


					This block is scoped, the rest of the page will not change if you click here!</a>


				<div class="list-group list-group-flush">
					<a href="{{path('app_admin_products_index')}}" class="list-group-item list-group-item-action bg-light">Admin Products</a>
					<a href="{{path('app_admin_category_index')}}" class="list-group-item list-group-item-action bg-light">Admin category</a>
					<!-- Add more links here -->
				</div>
			</div>
		</div>

		<div id="page-content-wrapper">
			<div class="container-fluid">
				<turbo-frame
					id="the_frame_id">{# <div class="section6 colcenter">
																		<div class="card " style="width: 60rem;text-align: center; background-color:  rgb(102, 224, 155); ">
																			<div class="card-body">
																				<ul class="list-group">
																					<li class="list-group-item">
																						<a href="{{path('app_admin_article_blog_index')}}" class="card-link">Admin Article Blog</a>
																					</li>
																					<li class="list-group-item">
																						<a href="{{path('app_admin_cart_index')}}" class="card-link">Admin Cart</a>
																					</li>
																					<li class="list-group-item">
																						<a href="{{path('app_admin_categories_blog_index')}}" class="card-link">Admin Categories Blog</a>
																					</li>
																					<li class="list-group-item">
																						<a href="{{path('app_admin_category_index')}}" class="card-link">Admin category</a>
																					</li>
																					<li class="list-group-item">
																						<a href="{{path('app_admin_comments_blog_index')}}">Admin Comments Blog</a>
																					</li>
																					<li class="list-group-item">
																						<a href="{{path('app_admin_order_index')}}" class="card-link">Admin Order</a>
																					</li>
																					<li class="list-group-item">
																						<a href="{{path('app_admin_paiement_index')}}" class="card-link">Admin Paiement</a>
																					</li>
																					<li class="list-group-item">
																						<a href="{{path('app_admin_products_index')}}" class="card-link">Admin Products</a>
																					</li>
																					<li class="list-group-item">
																						<a href="{{path('app_admin_user_index')}}" class="card-link">Admin User</a>
																					</li>
												
																					<li class="list-group-item">
																						<a href="{{path('app_admin_adress_index')}}" class="card-link">Admin Adress</a>
																					</li>
																				</ul>
																			</div>
																		</div>
												
												
																	</div> #}

				</turbo-frame>
			</div>
		</div>
	</div>

{% endblock %}

{#  cf ressource : https://symfony.com/bundles/ux-turbo/current/index.html#using-multiple-transports #}
{# indication d'explication de copilote :apres retraduction 
 
 Dans le contexte de Symfony UX Turbo et Mercure, vous pouvez penser aux "transports" comme des canaux de communication. Si vous voulez envoyer des données d'un point A à un point B (via le transport A), puis de B à C (via le transport B), vous pouvez le faire en publiant des mises à jour sur les hubs Mercure correspondants.

Cependant, il est important de noter que les données que vous envoyez (votre "bagage") ne sont pas "ouvertes" ou traitées par les transports eux-mêmes. Les transports sont simplement des moyens de transmettre les données. C'est le code de votre application qui "ouvre le bagage" et traite les données.

Voici comment vous pourriez organiser cela :

1.Publiez une mise à jour sur le hub Mercure correspondant au transport A. Cette mise à jour contiendrait les données que vous voulez envoyer de A à B. 

 code php :
public function publishToA(HubInterface $hubA): Response
{
    $update = new Update('topicA', 'data for B');
    $hubA->publish($update);
    // ...
}

2.Dans le code qui gère le point B, écoutez les mises à jour sur le sujet topicA. Lorsqu'une mise à jour est reçue, publiez une nouvelle mise à jour sur le hub Mercure correspondant au transport B. Cette mise à jour contiendrait les données que vous voulez envoyer de B à C.

code php :
public function handleB(HubInterface $hubB): Response
{
    // This code would be triggered when an update on 'topicA' is received
    $update = new Update('topicB', 'data for C');
    $hubB->publish($update);
    // ...
}

3.Dans le code qui gère le point C, écoutez les mises à jour sur le sujet topicB. Lorsqu'une mise à jour est reçue, traitez les données.
 
code php :
public function handleC(): Response
{
    // This code would be triggered when an update on 'topicB' is received
    // "Open the baggage" and process the data
    // ...
}

Dans vos templates Twig, vous pouvez utiliser la fonction turbo_stream_listen() pour écouter les mises à jour Turbo Streams pour un sujet spécifique sur un hub spécifique :

<div id="messages" {{ turbo_stream_listen('topicB', 'hubB') }}></div>

Dans cet exemple, le div avec l'ID messages écoutera les mises à jour Turbo Streams pour le sujet topicB sur le hub hubB.
#}
